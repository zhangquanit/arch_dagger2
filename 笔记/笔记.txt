
1、@Inject
带有此注解的属性或构造方法将参与到依赖注入中，Dagger2会实例化有此注解的类
可用在成员变量、构造函数(多个构造函数，只能有一个构造函数使用Inject)、成员方法上

作用在构造函数上会编译生成
xx_Factory
作用在方法或成员变量上会编译生成
xx_MembersInjector

2、@Module
带有此注解的类，用来提供依赖，里面定义一些用@Provides注解的以provide开头的方法，这些方法就是所提供的依赖，
Dagger2会在该类中寻找实例化某个类所需要的依赖。
比如：
@Module
public class MainModule {
    private final MainContract.View mView;
    private final Bundle mBundle;
    private  View.OnClickListener mOnClickListener;

    public MainModule(MainContract.View view, Bundle bundle) {
        mView = view;
        mBundle=bundle;
    }
    public void setOnClickListener(View.OnClickListener onClickListener){
        mOnClickListener=onClickListener;
    }

    @Provides
    MainContract.View provideMainView() { //MainModule_ProvideMainViewFactory
        return mView;
    }
    @Provides
    Bundle provideBundle(){ //MainModule_ProvideBundleFactory
        return mBundle;
    }
    @Provides
    View.OnClickListener getOnClickListener(){ //MainModule_GetOnClickListenerFactory
        return mOnClickListener;
    }
}

@Provides注解自动生成的类
--MainModule_ProvideMainViewFactory
--MainModule_ProvideBundleFactory
--MainModule_GetOnClickListenerFactory


3、@Component
用来将@Inject和@Module联系起来的桥梁，从@Module中获取依赖并将依赖注入给@Inject

自动生成 DaggerXX类

/**
 * 一个Component类可以包含多个Module类，用来提供依赖。
 */
@Component(modules = MainModule.class)
public interface MainComponent {
    void inject(MainActivity activity); //对外提供的方法
}
编译生成DaggerMainComponent

调用：
        MainModule mainModule = new MainModule(this, new Bundle()); //构造Module，传入需要对外提供依赖的对象
        mainModule.setOnClickListener(onClickListener);

        DaggerMainComponent.builder()
                .mainModule(mainModule)
                .build()
                .inject(this);





public final class DaggerMainComponent implements MainComponent {
  private Provider<OnClickListener> getOnClickListenerProvider;
  private Provider<View> provideMainViewProvider;
  private Provider<Bundle> provideBundleProvider;

  private Provider<MainPresenter> mainPresenterProvider;
  private MembersInjector<MainPresenter> mainPresenterMembersInjector;
  private MembersInjector<MainActivity> mainActivityMembersInjector;

  private DaggerMainComponent(Builder builder) {
    assert builder != null;
    initialize(builder);
  }

  public static Builder builder() {
    return new Builder();
  }

  private void initialize(final Builder builder) {
    //构建Module中需要对外提供的对象(@Provides)
    this.getOnClickListenerProvider = MainModule_GetOnClickListenerFactory.create(builder.mainModule);
    this.provideMainViewProvider = MainModule_ProvideMainViewFactory.create(builder.mainModule);
    this.provideBundleProvider = MainModule_ProvideBundleFactory.create(builder.mainModule);
    //构建MainPresenter中使用@Inject的方法
    this.mainPresenterMembersInjector = MainPresenter_MembersInjector.create(getOnClickListenerProvider);
    //构建MainPresenter，并注入其中@Inject方法需要的参数
    this.mainPresenterProvider = MainPresenter_Factory.create(mainPresenterMembersInjector, provideMainViewProvider, provideBundleProvider);
    //构建MainActivity中的@Inject注解
    this.mainActivityMembersInjector = MainActivity_MembersInjector.create((MembersInjector) MembersInjectors.noOp(), mainPresenterProvider);
  }

  @Override
  public void inject(MainActivity activity) {
    //将MainPresenter对象注入到MainActivity中
    mainActivityMembersInjector.injectMembers(activity);
  }

  }





















